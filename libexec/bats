#!/usr/bin/env bash
set -e


version() {
  echo "Bats 0.4.0"
}

usage() {
  version
  echo "Usage: bats [-c] [-p | -t] [-r] [-o <filename>] <test> [<test> ...]"
}

help() {
  usage
  echo
  echo "  <test> is the path to a Bats test file, or the path to a directory"
  echo "  containing Bats test files."
  echo
  echo "  -c, --count    Count the number of test cases without running any tests"
  echo "  -h, --help     Display this help message"
  echo "  -p, --pretty   Show results in pretty format (default for terminals)"
  echo "  -t, --tap      Show results in TAP format"
  echo "  -o <filename>  Write test results to <filename>"
  echo "  -r             Release output from tests to STDOUT"
  echo "  -v, --version  Display the version number"
  echo
  echo "  For more information, see https://github.com/sstephenson/bats"
  echo
}

resolve_link() {
  $(type -p greadlink readlink | head -1) "$1"
}

abs_dirname() {
  local cwd="$(pwd)"
  local path="$1"

  while [ -n "$path" ]; do
    cd "${path%/*}"
    local name="${path##*/}"
    path="$(resolve_link "$name" || true)"
  done

  pwd
  cd "$cwd"
}

expand_path() {
  { cd "$(dirname "$1")" 2>/dev/null
    local dirname="$PWD"
    cd "$OLDPWD"
    echo "$dirname/$(basename "$1")"
  } || echo "$1"
}

export BATS_LIBEXEC="$(abs_dirname "$0")"
export BATS_PREFIX="$(abs_dirname "$BATS_LIBEXEC")"
export BATS_CWD="$(abs_dirname .)"
export PATH="$BATS_LIBEXEC:$PATH"

source $BATS_LIBEXEC/common_functions.shrc

unset pass_the_opts pretty
[ -t 0 ] && [ -t 1 ] && pretty="1"
[ -n "$CI" ] && pretty=""

while getopts ":hvctpro:-:" opt; do
  if [[ $opt == '-' ]]; then
	case $OPTARG in
	  'pretty')
	     opt=p;;
	  'tap') 
	     opt=t;;
	  'help')
	     opt=h;;
	  'version')
	     opt=v;;
	  *)
	    if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
	 	echo "Unknown option --${OPTARG}" >&2
	    fi
	    exit 1
	  ;;
	esac
  fi
  case $opt in
    h)
       help
       exit 0
       ;;
    v)
      version
      exit 0
      ;;
    c)
      pass_the_opts="$pass_the_opts -c"
      ;;
    r)
      pass_the_opts="$pass_the_opts -r"
      BATS_RELEASE_OUTPUT=1
      ;;
    t)
      pretty=""
      ;;
    p)
      pretty="1"
      ;;
    o)
      TMPFILE1=$(createTempFile)
      pass_the_opts="$pass_the_opts -o $TMPFILE1"
      BATS_TAPOUT_FILE=$OPTARG
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done
shift $((OPTIND-1))

arguments=("${@}") 

if [ "${#arguments[@]}" -eq 0 ]; then
  usage >&2
  exit 1
fi

bats_exit_trap() {
	# remove rubbish
	if [[ -e $TMPFILE1 ]]; then
		rm -f $TMPFILE1
	fi
}
trap "bats_exit_trap" exit


filenames=()
for filename in "${arguments[@]}"; do
  if [ -d "$filename" ]; then
    shopt -s nullglob
    for suite_filename in "$(expand_path "$filename")"/*.bats; do
      filenames["${#filenames[@]}"]="$suite_filename"
    done
    shopt -u nullglob
  else
    filenames["${#filenames[@]}"]="$(expand_path "$filename")"
  fi
done

if [ "${#filenames[@]}" -eq 1 ]; then
  command="bats-exec-test"
else
  command="bats-exec-suite"
fi

if [ -n "$pretty" ]; then
  extended_syntax_flag="-x"
  formatter="bats-format-tap-stream"
else
  extended_syntax_flag=""
  formatter="cat"
fi

set -o pipefail execfail

if [[ -n $BATS_RELEASE_OUTPUT && -z $BATS_TAPOUT_FILE  ]]; then
  # covers: -r
  echo "ERROR: Cannot release output of tests to STDOUT and produce TAP output to STDOUT"  2>&1
  exit 1
else
  if [[ -n $BATS_TAPOUT_FILE ]]; then
    # covers: -r -o t.tap || -o t.tap
    set +e
    "$command" $pass_the_opts $extended_syntax_flag "${filenames[@]}"
    status=$?
    set -e
    cat $TMPFILE1 | "$formatter" > $BATS_TAPOUT_FILE
    exit $status
  else
    # (near) original command: no tapout file, no release to STDOUT - will spew test results on STDOUT
    exec "$command" $pass_the_opts $extended_syntax_flag "${filenames[@]}" | "$formatter"
  fi
fi
