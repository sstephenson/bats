batslib(7) -- Bats Standard Library of Test Helpers
===================================================


## DESCRIPTION

The Standard Library is a collection of test helpers intended to
simplify testing. It helps building test suits that provide relevant
information when a test fails to speed up debugging.

It contains the following types of test helpers.

  * [ASSERTIONS][] are functions that perform a test and output relevant
    information on failure to help debugging.

Test helpers send all output to the standard error, making them usable
outside of `@test` functions too. Output is formatted for readability as
described in [OUTPUT][].

The Standard Library is automatically loaded and available in all test
files.


## OUTPUT

On failure, in addition to the usual output generated by Bats,
[ASSERTIONS][] display information relevant to the failed test to help
debugging. The output is formatted for readability and displayed as
key-value pairs on the standard error.

When the value is one line long, the pair is displayed in a columnar
fashion called **two-column** format.

    -- output differs --
    expected : want
    actual   : have
    --

When the value is longer than one line, the number of lines in the value
is displayed after the key, and the value starts on the next line and is
indented by two spaces for added readability. This is called
**multi-line** format.

For convenience, sometimes related values are also displayed in this
format even if they are only one line long.

    -- output differs --
    expected (1 lines):
      want
    actual (3 lines):
      have 1
      have 2
      have 3
    --


## ASSERTIONS

Assertions are functions that perform a test and output relevant
information on failure to help debugging. They return 1 on failure and 0
otherwise.

Assertions about exit code and output operate on the results of the most
recent invocation of `run`.

* `flunk` [<MESSAGE>]:
  Display <MESSAGE> and fail. This function provides a convenient way to
  report various failures. Other test helpers also use it to display
  output on failure. When no parameters are specified, <MESSAGE> is read
  from the standard input.

* `assert` <EXPRESSION>:
  Fail if <EXPRESSION> evaluates to false. On failure, <EXPRESSION> is
  displayed.

  **Note:** <EXPRESSION> can only be a simple command. Compound
  commands, such as `[[`, are not supported.

* `assert_equal` <EXPECTED> <ACTUAL>:
  Fail if <EXPECTED> and <ACTUAL> do not equal. On failure both values
  are displayed. If either one is longer than one line, both are
  displayed in _mulit-line_ format.

* `assert_output` [<EXPECTED>]:
  Fail if <EXPECTED> does not equal `$output`. On failure both values
  are displayed. If either one is longer than one line, both are
  displayed in _mulit-line_ format. When no parameters are specified,
  <EXPECTED> is read from the standard input.

* `assert_success` [<EXPECTED>]:
  When no parameters are specified, fail if `$status` is not `0`. On
  failure `$status` and `$output` are displayed. If `$output` is longer
  than one line, it is displayed in _mulit-line_ format.

  When <EXPECTED> is specified and `$status` is `0`, fail if <EXPECTED>
  does not equal `$output`. On failure both values are displayed. If
  either one is longer than one line, both are displayed in _multi-line_
  format.

* `assert_failure` [<EXPECTED>]:
  When no parameters are specified, fail if `$status` is `0`. On failure
  `$output` is displayed. If `$output` is longer than one line, it is
  displayed in _mulit-line_ format.

  When <EXPECTED> is specified and `$status` is not `0`, fail if
  <EXPECTED> does not equal `$output`. On failure both values are
  displayed. If either one is longer than one line, both are displayed
  in _multi-line_ format.

* `assert_line` [<INDEX>] <LINE>:
  When only <LINE> is specified, fail if `${lines[@]}` does not contain
  <LINE>. On failure <LINE> and `$output` are displayed. If `$output` is
  longer than one line, it is displayed in _mulit-line_ format.

  When <INDEX> is specified, fail if <LINE> does not equal
  `${lines[INDEX]}`. On failure <INDEX>, <LINE> and `${lines[INDEX]}`
  are dispalyed.

  **NOTE:** Due to a bug in Bats, empty lines are discarded, causing
  line indices to change and preventing testing for empty lines. See
  [BUGS][] for more.

* `refute_line` [<INDEX>] <LINE>:
  When only <LINE> is specified, fail if `${lines[@]}` contains <LINE>.
  On failure <LINE>, its zero-based index in `${lines[@]}`, and
  `$output` are dispalyed. If `$output` is longer than one line, it is
  displayed in _mulit-line_ format with <LINE> highlighted.

  When <INDEX> is specified, fail if <LINE> equals `${lines[INDEX]}`. On
  failure <LINE> and <INDEX> are dispalyed.

  **NOTE:** Due to a bug in Bats, empty lines are discarded, causing
  line indices to change and preventing testing for empty lines. See
  [BUGS][] for more.


## BUGS

### Report bugs

Report bugs on Bats' GitHub issue tracker at
<https://github.com/sstephenson/bats/issues>.


### Known bugs

Due to a bug in Bats, empty lines are missing from `${lines[@]}`,
causing line indices to change and preventing testing for empty lines
when using `assert_line` and `refute_line`. See PR \#93 on Github at
<https://github.com/sstephenson/bats/pull/93>.


## COPYRIGHT

TODO(ztombol): Find a suitable license.


## SEE ALSO

`bash`(1), `bats`(1), `bats`(7)
